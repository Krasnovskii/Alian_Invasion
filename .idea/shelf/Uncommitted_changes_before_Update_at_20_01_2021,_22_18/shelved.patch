Index: button.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/button.py b/button.py
--- a/button.py	(revision fdf91e52d954bf0e8be5b85864171b09889848fa)
+++ b/button.py	(date 1611177333456)
@@ -1,0 +1,32 @@
+import  pygame.font
+
+class Button:
+
+    def __init__(self, ai_game, msg):
+        '''Initialize button attributes'''
+        self.screen = ai_game.screen
+        self.screen_rect = self.screen.get_rect()
+
+        #Set the dimensions and properties of the button
+        self.width, self.height = 200, 50
+        self.button_color = (0, 255, 0)
+        self.text_color = (255, 255, 255)
+        self.font = pygame.font.SysFont(None, 48)
+
+        #Build the button's rect object and center it
+        self.rect = pygame.Rect(0, 0, self.width, self.height)
+        self.rect.center = self.screen_rect.center
+
+        #The button massage needs to be rpreppared only once
+        self._prep_msg(msg)
+
+    def _prep_msg(self, msg):
+        ''' Turn into a rendered image and center text on the button'''
+        self.msg_image = self.font.render(msg, True, self.text_color, self.button_color)
+        self.msg_image_rect = self.msg_image.get_rect()
+        self.msg_image_rect.center = self.rect.center
+
+    def draw_button(self):
+        #Draw blank button and than draw massage
+        self.screen.fill(self.button_color, self.rect)
+        self.screen.blit(self.msg_image, self.msg_image_rect)
Index: ship.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\n\nclass Ship:\n    def __init__(self, ai_game):\n        self.screen = ai_game.screen\n        self.screen_rect = ai_game.screen.get_rect()\n\n        #Load ship\n        self.image = pygame.image.load('images/ship.bmp')\n        self.rect = self.image.get_rect()\n\n        #start eaxh new sheep at the bottom xenter of the screen\n        self.rect.midbottom = self.screen_rect.midbottom\n\n    def blitime(self):\n        #Draw the ship at its current location\n        self.screen.blit(self.image, self.rect)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ship.py b/ship.py
--- a/ship.py	(revision fdf91e52d954bf0e8be5b85864171b09889848fa)
+++ b/ship.py	(date 1611171862735)
@@ -1,17 +1,51 @@
 import pygame
 
+
 class Ship:
+    '''A class mange the ship'''
     def __init__(self, ai_game):
         self.screen = ai_game.screen
+        self.settings = ai_game.settings
         self.screen_rect = ai_game.screen.get_rect()
 
-        #Load ship
+        # Load ship
         self.image = pygame.image.load('images/ship.bmp')
         self.rect = self.image.get_rect()
 
-        #start eaxh new sheep at the bottom xenter of the screen
+        # start each new sheep at the bottom xenter of the screen
         self.rect.midbottom = self.screen_rect.midbottom
 
+        # Store a decimal value for the ship's horisontal position
+        self.x = float(self.rect.x)
+        self.y = float(self.rect.y)
+
+        # Movement flag
+        self.moving_right = False
+        self.moving_left = False
+        self.moving_up = False
+        self.moving_down = False
+
+    def update(self):
+        '''Update the ship's position based on the movement flag'''
+        if self.moving_right and self.rect.right < self.screen_rect.right:
+            self.x += self.settings.ship_speed
+        elif self.moving_left and self.rect.left > 0:
+            self.x -= self.settings.ship_speed
+
+        elif self.moving_down and self.rect.bottom < self.screen_rect.bottom:
+            self.y += self.settings.ship_speed
+        elif self.moving_up and self.rect.top > 0:
+            self.y -= self.settings.ship_speed
+
+        # update rect object from self.x
+        self.rect.x = self.x
+        self.rect.y = self.y
+
     def blitime(self):
-        #Draw the ship at its current location
-        self.screen.blit(self.image, self.rect)
\ No newline at end of file
+        # Draw the ship at its current location
+        self.screen.blit(self.image, self.rect)
+
+    def center_ship(self):
+        '''Center the ship of the screen'''
+        self.rect.midbottom = self.screen_rect.midbottom
+        self.x = float(self.rect.x)
\ No newline at end of file
Index: alien.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/alien.py b/alien.py
--- a/alien.py	(revision fdf91e52d954bf0e8be5b85864171b09889848fa)
+++ b/alien.py	(date 1611012363080)
@@ -1,0 +1,34 @@
+import pygame
+from pygame.sprite import Sprite
+
+
+class Alien(Sprite):
+    '''A class to represent a single alien in the fleet'''
+
+    def __init__(self, ai_game):
+        '''Initilize the alien and set its starting position'''
+        super().__init__()
+        self.screen = ai_game.screen
+        self.settings = ai_game.settings
+
+        # Load the alien image and set its rect attribute
+        self.image = pygame.image.load('images/alien.bmp')
+        self.rect = self.image.get_rect()
+
+        # start each new alien near the top left of the screen
+        self.rect.x = self.rect.width
+        self.rect.y = self.rect.height
+
+        # Store the alien's exact horisontal poition
+        self.x = float(self.rect.x)
+
+    def check_edges(self):
+        '''Return True if alien is at edge of the screen'''
+        screen_rect = self.screen.get_rect()
+        if self.rect.right >= screen_rect.right or self.rect.left <= 0:
+            return True
+
+    def update(self):
+        '''Move aliens to the rigth'''
+        self.x += (self.settings.alien_speed * self.settings.fleet_direction)
+        self.rect.x = self.x
Index: bullet.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bullet.py b/bullet.py
--- a/bullet.py	(revision fdf91e52d954bf0e8be5b85864171b09889848fa)
+++ b/bullet.py	(date 1611010207460)
@@ -1,0 +1,31 @@
+import pygame
+from pygame.sprite import Sprite
+
+
+class Bullet(Sprite):
+    '''A class to manage bullets fired from thw ship'''
+
+    def __init__(self, ai_game):
+        '''Create a bullet object at the ship's current position'''
+        super().__init__()
+        self.screen = ai_game.screen
+        self.settings = ai_game.settings
+        self.color = self.settings.bullet_color
+
+        # Create a bullet rect at (0, 0) and then set corect position
+        self.rect = pygame.Rect(0, 0, self.settings.bullet_width, self.settings.bullet_height)
+        self.rect.midtop = ai_game.ship.rect.midtop
+
+        # store the bullet's position as a decimal_value
+        self.y = float(self.rect.y)
+
+    def update(self):
+        '''Move the bullet up the screen'''
+        # Update the decimal position of the bullet
+        self.y -= self.settings.bullet_speed
+        # Update the rect position
+        self.rect.y = self.y
+
+    def draw_bullet(self):
+        '''Draw the bullet to the screen'''
+        pygame.draw.rect(self.screen, self.color, self.rect)
Index: alien_invasion.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sys\nimport pygame\nfrom settings import Settings\nfrom ship import Ship\n\n\nclass AlianInvesion:\n\n    def __init__(self):\n        pygame.init()\n        self.settings = Settings()\n\n        self.screen = pygame.display.set_mode((self.settings.screen_width, self.settings.screen_hight))\n        pygame.display.set_caption(\"Alian Invasion\")\n\n        self.ship = Ship(self)\n\n    def run_game(self):\n\n        # Start the main loop for the game\n        while True:\n            # Watch for keyboards and mouse\n            for event in pygame.event.get():\n                if event.type == pygame.QUIT:\n                    sys.exit()\n\n            # Redraw the screen during each pass trhough the loop.\n            self.screen.fill(self.settings.bg_color)\n            self.ship.blitime()\n            # Make the most recently drawn screen visible\n            pygame.display.flip()\n\n\nif __name__ == '__main__':\n    # Make game instance and run\n    ai = AlianInvesion()\n    ai.run_game()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/alien_invasion.py b/alien_invasion.py
--- a/alien_invasion.py	(revision fdf91e52d954bf0e8be5b85864171b09889848fa)
+++ b/alien_invasion.py	(date 1611178468688)
@@ -2,6 +2,11 @@
 import pygame
 from settings import Settings
 from ship import Ship
+from bullet import Bullet
+from alien import Alien
+from time import sleep
+from game_starts import GameStats
+from button import Button
 
 
 class AlianInvesion:
@@ -9,28 +14,212 @@
     def __init__(self):
         pygame.init()
         self.settings = Settings()
-
-        self.screen = pygame.display.set_mode((self.settings.screen_width, self.settings.screen_hight))
-        pygame.display.set_caption("Alian Invasion")
+        self.screen = pygame.display.set_mode((self.settings.screen_width,
+                                               self.settings.screen_height))
+        # Create an instance to store statistic
+        self.stats = GameStats(self)
 
         self.ship = Ship(self)
+        self.bullets = pygame.sprite.Group()
+        self.aliens = pygame.sprite.Group()
+        self._create_fleet()
+        #make the play button
+        self.play_button = Button(self, 'Play')
+        self._update_aliens()
+
+        pygame.display.set_caption("Alian Invasion")
 
     def run_game(self):
-
         # Start the main loop for the game
         while True:
-            # Watch for keyboards and mouse
-            for event in pygame.event.get():
-                if event.type == pygame.QUIT:
-                    sys.exit()
+            self._check_events()
+
+            if self.stats.game_active:
+                self.ship.update()
+                self.bullets.update()
+                self._update_aliens()
+
+            self._update_screen()
+            self._update_bullets()
+
+    def _check_events(self):
+        # Keyboard movements
+        for event in pygame.event.get():
+            if event.type == pygame.QUIT:
+                sys.exit()
 
-            # Redraw the screen during each pass trhough the loop.
-            self.screen.fill(self.settings.bg_color)
-            self.ship.blitime()
-            # Make the most recently drawn screen visible
-            pygame.display.flip()
+            elif event.type == pygame.KEYDOWN:
+                self._check_keydown_events(event)
+            elif event.type == pygame.KEYUP:
+                self._check_keyup_events(event)
+            elif event.type == pygame.MOUSEBUTTONDOWN:
+                mouse_pos = pygame.mouse.get_pos()
+                self._check_play_button(mouse_pos)
+
+
+    def _check_keydown_events(self, event):
+        '''Respond to keypresses'''
+        if event.key == pygame.K_RIGHT:
+            self.ship.moving_right = True
+        elif event.key == pygame.K_LEFT:
+            self.ship.moving_left = True
+        elif event.key == pygame.K_UP:
+            self.ship.moving_up = False
+        elif event.key == pygame.K_DOWN:
+            self.ship.moving_down = False
+        elif event.key == pygame.K_ESCAPE:
+            sys.exit()
+        elif event.key == pygame.K_SPACE:
+            self._fire_bullet()
+
+    def _check_keyup_events(self, event):
+        '''Respond to key releases'''
+        if event.key == pygame.K_RIGHT:
+            self.ship.moving_right = False
+        elif event.key == pygame.K_LEFT:
+            self.ship.moving_left = False
+        elif event.key == pygame.K_UP:
+            self.ship.moving_up = False
+        elif event.key == pygame.K_DOWN:
+            self.ship.moving_down = False
+
+    def _fire_bullet(self):
+        '''Create a new bullet and add it ro the bullets group'''
+        if len(self.bullets) < self.settings.bullets_allowed:
+            new_bullet = Bullet(self)
+            self.bullets.add(new_bullet)
+
+    def _update_bullets(self):
+        '''Update position of bullets and get rid of od bullets'''
+        # Get rid of bullets tht have disappeared.
+        for bullet in self.bullets.copy():
+            if bullet.rect.bottom <= 0:
+                self.bullets.remove(bullet)
+        self._check_bullet_alien_collision()
+
+    def _check_bullet_alien_collision(self):
+        '''Response to bullet colisions'''
+        # Remove any bullets and aliens that have collided
+        collision = pygame.sprite.groupcollide(self.bullets, self.aliens, True, True)
+
+        if not self.aliens:
+            # Destroy existing bullets and create new fleet
+            self.bullets.empty()
+            self._create_fleet()
+
+    def _create_fleet(self):
+        '''Create the fleet of aliens'''
+        # Create a fleet of alien and find the number of aliens in a row
+        # Spacing between each alien is equal to one alien width
+        alien = Alien(self)
+        alien_width, alien_height = alien.rect.size
+        avalible_space_x = self.settings.screen_width - (2 * alien_width)
+        number_aliens_x = avalible_space_x // (2 * alien_width)
+
+        # Determin the number of rows of aliens that fit on the screen
+        ship_height = self.ship.rect.height
+        avalible_space_y = (self.settings.screen_height - (3 * alien_height) - ship_height)
+        number_rows = avalible_space_y // (2 * alien_height)
+
+        # Create the first row of alians.
+        for row_number in range(number_rows):
+            for alien_number in range(number_aliens_x):
+                self._create_alien(alien_number, row_number)
+
+    def _create_alien(self, alien_number, row_number):
+        alien = Alien(self)
+        alien_width, alien_hight = alien.rect.size
+        alien.x = alien_width + 2 * alien_width * alien_number
+        alien.rect.x = alien.x
+        alien.rect.y = alien.rect.height + 2 * alien_hight * row_number
+        self.aliens.add(alien)
+
+    def _check_fleet_edges(self):
+        '''Respond appropriately if ane aliens have reached the edge'''
+        for alien in self.aliens.sprites():
+            if alien.check_edges():
+                self._change_fleet_direction()
+                break
+
+    def _change_fleet_direction(self):
+        '''Drop the entire fleet and change the fleet's direction'''
+        for alien in self.aliens.sprites():
+            alien.rect.y += self.settings.fleet_drop_speed
+        self.settings.fleet_direction *= -1
+
+    def _update_screen(self):
+        # Redraw the screen during each pass trhough the loop.
+        self.screen.fill(self.settings.bg_color)
+        self.ship.blitime()
+        for bullet in self.bullets.sprites():
+            bullet.draw_bullet()
+        self.aliens.draw(self.screen)
+        #Draw the play button if the game is inactive
+        if not self.stats.game_active:
+            self.play_button.draw_button()
+        # Make the most recently drawn screen visible
+        pygame.display.flip()
 
 
+    def _update_aliens(self):
+        '''Check if the fleet is at an edge,
+        than update the position of all aliens in th fleet'''
+        self._check_fleet_edges()
+        self.aliens.update()
+
+        # look for aliens ship collision
+        if pygame.sprite.spritecollideany(self.ship, self.aliens):
+            self._ship_hit()
+        # Look for aliens hitting the bottom of the screen
+        self._check_aliens_bottom()
+
+    def _ship_hit(self):
+        '''Respond to the ship being hit by an alien'''
+        if self.stats.ship_left > 0:
+            # Decrement ship left
+            self.stats.ship_left -= 1
+            # Get rid of any remaining aliens and bullets
+            self.aliens.empty()
+            self.bullets.empty()
+            # Create a new fleet and center the ship
+            self._create_fleet()
+            self.ship.center_ship()
+            # pause
+            sleep(0.5)
+        else:
+            self.stats.game_active = False
+            pygame.mouse.set_visible(True)
+
+    def _check_aliens_bottom(self):
+        '''Check if any aliens have reached the bottom of the screen'''
+        screen_rect = self.screen.get_rect()
+        for alien in self.aliens.sprites():
+            if alien.rect.bottom >= screen_rect.bottom:
+                # Treat this the same sa if the ship got hit
+                self._ship_hit()
+                break
+
+    def _check_play_button(self, mouse_pos):
+        '''Start a new game when the player clic Play'''
+        button_clicked = self.play_button.rect.collidepoint(mouse_pos)
+        if button_clicked and not self.stats.game_active:
+            # Reset the game statistic
+            self.stats.reset_status()
+            self.stats.game_active = True
+
+            # Get rid of any remaining aliens and bullets
+            self.aliens.empty()
+            self.bullets.empty()
+
+            #Create a new fleet and center chip
+            self._create_fleet()
+            self.ship.center_ship()
+
+            # Hide the mouse cursor
+            pygame.mouse.set_visible(False)
+
+
+
 if __name__ == '__main__':
     # Make game instance and run
     ai = AlianInvesion()
Index: game_starts.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/game_starts.py b/game_starts.py
--- a/game_starts.py	(revision fdf91e52d954bf0e8be5b85864171b09889848fa)
+++ b/game_starts.py	(date 1611175451965)
@@ -1,0 +1,15 @@
+
+
+class GameStats:
+    '''Track snanistics for Alien Invasion'''
+
+    def __init__(self, ai_game):
+        '''Initailize statistic'''
+        self.settings = ai_game.settings
+        self.reset_status()
+        # Start Alien Invasion in an active state
+        self.game_active = False
+
+    def reset_status(self):
+        '''Initiliaze statistics that can change during game'''
+        self.ship_left = self.settings.ship_limit
\ No newline at end of file
Index: settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>class Settings:\n    #Store all classes\n    def __init__(self):\n        #screen settings\n        self.screen_width = 800\n        self.screen_hight = 600\n        self.bg_color = (230, 230, 230)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/settings.py b/settings.py
--- a/settings.py	(revision fdf91e52d954bf0e8be5b85864171b09889848fa)
+++ b/settings.py	(date 1611096420750)
@@ -1,7 +1,25 @@
 class Settings:
-    #Store all classes
+    # Store all classes
     def __init__(self):
-        #screen settings
-        self.screen_width = 800
-        self.screen_hight = 600
+        # screen settings
+        self.screen_width = 1200
+        self.screen_height = 700
         self.bg_color = (230, 230, 230)
+
+        # ship setting
+        self.ship_speed = 2
+        self.ship_limit = 3
+        self.alien_speed = 1.0
+        self.fleet_drop_speed = 10
+        # fleet_direction of 1 represents right; -1 represents left
+        self.fleet_direction = 1
+
+        # Bullet settings
+        self.bullet_speed = 1.5
+        self.bullet_width = 3
+        self.bullet_height = 15
+        self.bullet_color = (255, 0, 0)
+        self.bullets_allowed = 3
+
+
+
